### TODAY
get_regionprops
get_percentiles+get_regionprops in same operation
dask segment and regionprops remotely

quick segmentation fix
    use k1/abs derivative of sum of mask along short dimension to split side-by-side cell ends

easy zip/wrap_diagnostics over a trench stack
easy holomap of segmentation results (use all keys if no key list given; also allow singletons)
    scroll wheel by default

allow keying into a singleton with show_plot_browser
ui function to easily subset keys in diag, show slider to browse timepoints in trench segmentation diag
    dataframe_browser with sliders for trench_set, trench, t
        get_trench_thumb(/get_trench_stack?) function that can be passed to image_viewer
    access dict with future.result(), cache locally

util.get_random (similar to get_one)
    equivalents to get N instead of 1, random/first

get trench stacks, then run focus+segmentation
good trenches filtering using: hough_value, focus

multichannel_image_viewer
    stacked and side-by-side (use overlays so only update when necessary?)
frame_viewer/image_viewer (takes a dict); easy callback to wrap a regrid??
plot trench 95% percentile brightness vs. time, click on a plot to show plot in frame_viewer

### SOON
new trench detection
    quick way to fix angle? (using symmetry of aliasing? abs val of derivative, smoothed?)
    use columns to filter out empty trenches (after finding bboxes!)
    dask find bboxes
    plot periodogram x-axis as wavelength

fix intermittent trench detection clustering issues

stream results back to list+cancel immediately (to keep memory free)
    asynchronously (!!!)
    hide exception messages
    utility func that keeps a dict updated with futures in real-time
        PIPELINE? that stores intermediate results in dicts? (and update order in a queue?)
    something that triggers a stream (with rate limit) whenever a future finishes, for use with real-time results coming off the microscope
jupyterlab state

make namedtuple dicts pickleable (wrapper that unpickles to a normal namedtuple?)

allow merging filenames (so timepoints are joint)???

check trench_set in get_trench_stacks (hash to make sure values are different)
get_trench_stacks: easy way to load in different channels
pandas schema for cell lineages
benchmark get_trench_stacks with memmap

obey regionprops bbox convention: half-open interval [x_min, x_max)
RANSAC to refine angle (e.g., 180405.nd2/pos14/MCHERRY/t0)

store namedtuple in dataframe for easy groupby/sending series via dask without incurring performance cost of iter_index
make apply_map_futures gracefully return when nothing matches predicate [real problem: return gracefully when mapping func returns None]
function for next(iter(framestack_group.groupby('t')))[1]

strategy for allowing trench_detection, trench_segmentation to return a dataframe of metadata without incurring cost of constructing holoviews objects which will never be used
    how fast is dask transfer vs recomputing locally?

get segmentation working better with trench normalize? (lower threshold?)
    or does otsu threshold already work well enough? (for trenches with uneven brightness along axis)
transcribe charles segmentation
compare to charles
    segmentation diffing?

get per-timepoint, per-trench focus locally
per-trench focus with dask
segmentation with dask
    keep segmentation masks remote
    function to easily pull back calculated quantities
        given mask stack and image stack
        output dataframe of calculated quantities
            (like trenchwise/etc.)
identify transcription errors
nice UI
    show trench stacks lined up for selected trenches

draw trench bboxes on image
use .asof when looking up trench bbox points
optimize get_trench_stacks
    check that pickle/unpickling doesn't screw up speed of accessing .values for upper_left/lower_right

fix trench detection with debris in feeding channel (TxnErr002.nd2)
    angle/pitch finding seems to mostly work
        debug pitch bias issue (frequencing sampling?)
        don't count 0 values in offset calculation

### POSTPONED
frame histogram (clustering or thresholding) for frame quality
errors as dataframe
fix edge_points on boundary/corners (result should be continuous when adding epsilon to coordinates)
fix off-by-one issue in trench detection offsets
take entire datasets, rotate by random angles, crop slightly in nonsquare aspect ratios, assess angle detection performance (compare to angle_offset+orig_found_angle)

pandas local/dask runner+combiner for both frame quality/trench finding
dask trench-wise processing for trench-wise focus df

groupby/max group size for the above

mask out found trenches, compute mean intensity/PSD for masked frames as another debris check
    how to find debris that intersects with trenches? does this work?
calculate azimuthally-averaged PSD, throw out images with bright low-frequency debris

easy dask re-running of trench detection on bad_angle frames
    function to re-run dask (OR LOCAL?) on a dataframe
        by making gather a pass-through (?), map_futures with max_level=1 so we don't recurse super deep
        OR just use local cluster for local testing?
    can use this to throw out out-of-focus frames
    (join dataframe with focus, debris indicators, find appropriate cuts)
    functions that make it easy to group tasks (arbitrarily?) with a flag
        groupby (filename, position) and max group size, submit grouped jobs, then merge results dict (keyed by index) upon gather

debug period-finding errors
debug failures (make function to collect failures as dataframe to send to frame_stream)
can I fix workload balancing issues by grouping tasks??
submit workload balancing dask.distributed issue
    starved workers at the end of get_trenches
    task serialization (wrapped_diagnostics_to_dataframe)
    update priority: so that wrapped_diagnostics_to_dataframe run+transfer ASAP

### TRENCH DETECTION POLISH
optimize holoviews .options and and .max for trench_segmentation
    report issue related to my pickling issue?
defaultdict which can filter out hv.ViewableElements so we don't waste memory on plots we'll never pull down
    benchmark how long constructing holoviews objs takes vs. no holoviews objs for get_trenches_diag
    benchmark how long it takes to pickle+pull down from a worker vs. re-run get_trenches locally

### NEXT
run charles segmentation locally on one frame stack
run my trench detection+charles segmentation using dask
do the same for charles phase segmentation, compare with fluorescence
trench finding in phase
corrupted nd2 reader

### AFTER
my trench detection in phase+charles phase segmentation using dask
first cut of tracking using integer programming (given a good segmentation)
tracking+segmentation

### AFTER UI POLISH
explicit dask retry of failed tasks
show_plot_browser should work for singleton keys [i.e., single plots] (and make that work correctly with streams)
feasibility of running regrid off a remote image stored on a worker (is there a way to hook up bokeh to connect directly to worker?)
synchronize show_plot_browser StreamXY [exclude specially-tagged images?]
make regrid work better at max zoom level (show actual pixels)
trench_image_viewer, cell_image_viewer: plot trench/cell outlines, accept arbitrary callbacks that return (possibly cached) hv ViewableElements to overlay (e.g., can compute segmentation on-the-fly, cache it using cachetools, return an overlayed contour)
    FrameStream <-> TrenchStream <-> CellStream, e.g., updating cellstream updates trench (if needed), which updates frame (if needed)
    moving TrenchStream also picks the first cell in the trench, Frame picks first trench in frame
    show right/left trench/cell arrow widgets below frame browser widgets
    trench/cell scrolling updates contour but does not change frame/viewport by default
    “Zoom to Trench” button sets x_range, y_range, frame to zoom in on selected trench
    “Zoom to Cell” button (in same row as Zoom to Trench) does the same for cell (using bbox for current frame)

###POLISH
fit shear in trench detection (this is probably what's limiting trench rotation finding accuracy)
fix qgrid column name wrapping
qgrid data wrapping
qgrid resize column width to fit data
qgrid UI to show/hide many columns quickly
qgrid freeze index/multiindex
some way of passing options through to sub-functions in processing pipeline? quick hack now.
bundle up raw intermediate results (e.g., ndarrays) in diag for easy debugging/running steps by hand (shouldn't take any more space to pickle because holoviews objects just wrap this data anyway)
compression/incremental loading/prefetching for regridded images+animations
only display/update plots that are open in plot browser

####################################################################################################################

### 
compare stage position to trench finding, use stage position to find absolute trench numbers
parallel load trenches from ND2

#### TODAY

only compute checksums for files with duplicate sizes
debug old ND2 version warning
file hash
deduplicate ND2's using file hash (check reliability of other heuristics)
diagnose ND2 time mismatch
check self-consistency/availability of TIFF metadata for TIFF aggregations with lots of files/bytes
make preliminary ND2/TIFF correspondences
check frame data for representative TIFF only
output preliminary deletion list (correspondences and duplicated ND2's) for review
use jq/JMESPath

#### LATER
check frame data (first, last, evenly-spaced frames, random) [requires parsing TIFF naming conventions... or parsing all metadata]

#### ASAP

de-duplicate nd2 files using size/mtime/metadata strings
de-duplicate tiffs vs. nd2 using EITHER time or x_data (kdtree?)
dask-parallelization from notebook
cmd line arg to parallelize compress operation (see below)
command to output static .html with trench finding diagnostics given file
notebook which allows easily identifying trench finding errors at scale running on file lists pulled from inventory queries
DEPLOY: set up matriarch on peoples' O2 accounts, give people file lists of good and bad files to check diagnostics

#### FOR TOMORROW

use hough to detect trench periodicity! run hough on each trench set separately?
use LRUStorageCache for zarr

parallelized ingest_nd2/ingest_tiff/trench_pack (NO QUANTIZATION)
ingest_tiff --watch
STORE CHANNELS IN SEPARATE ARRAYS? new path: raw/pos_0/ch_1 (e.g., trench_crops/pos_0/trench_set_1/trench_84/ch_3)
FUNCTIONS FOR MOVING TRENCH THUMBS/SEG MASKS ON AND OFF DISK
REGULARIZE (half-way normalize) trench intensity for sharpness measurement
turn on trench_set/trench progress bars for segmentation
rough segmentation
NOT TRACKING
intensity hough
rotation-invariant (feeding channel) detrending
fix trench detection to work with only one trench set filled

OUTPUT (and input!!!) in MATLAB .CSV FORMAT

################

SEGMENTATION
TRACKING
vectorize hessian_eigenvalues so we don't need to use map_ndarray on image stacks
rough hough with binarized image, then blur and intensity hough
ability to join runs of the same experiment (???)

#################

fix rotation: blur, do intensity hough, try edge-filtering first
blur trench profile, set minimum trench spacing

set of scatter plots synchronized to qgrid (bidirectional RangeXY), tool tips
SEE: https://github.com/ioam/holoviews/issues/1600

STORE CHANNELS IN SEPARATE ARRAYS? new path: raw/pos_0/ch_1 (e.g., trench_crops/pos_0/trench_set_1/trench_84/ch_3)
ingest_tiff
ingest_tiff --watch (need some way of updating latest field, poll metadata?)
trench_pack
trench_pack QUALITY THRESHOLDS for trench detection, if it fails just keep whole frame unmodified (or quantized, if --quantize-trench)
trench_pack --quantize-trench/--quantize-fov (which keeps a quantized whole-FOV copy in pos#/ch0/fov)
trench_pack --crop-fov (for each trench set keeps only bounding box of all trench thumb corners, which can be combined with --quantize-fov)
inventory_data --formats nd2,tiff,zarr
PARALLELIZE ingest_nd2, ingest_tiff, quantize

mother cell endpoint tracking
mother cell segmentation mask
allow image viewer to overlay seg masks, trench thumb boundaries easily
fluorescent readout using cell masks

switch to pipenv on orchestra / FIX JUPYTER THEME (git repo/rectify with Bancroft)

REPLY TO HOLOVIEWS DEVS

fix pickling of diag_pos:
    make sure pickle isn't doing something stupid (compare pickled sizes with asized)
    compress/quantize/change dtype/crop intermediates (esp. masks)
    load raw images from disk
set up viewer for quick refresh of new data (just send new data to Stream)
fix none_pos
use trench_spacing to identify good/bad trench finding, use median (robust metric) from first 10 positions to constrain trench finding for rest of positions
refactor trench detection, only detect rotation once
per-trench and per-frame sharpness
per-trench and per-frame debris/QA detector
dataframe join with per-frame, per-trench metadata

rotation-invariant detrending
test detect_trenches on each position using max-stack, on a few positions using each timepoint (use trench spacing/rotation as benchmark)
look for brightest N pixels in trench cross-sections, show in table/next-prev browser so I can click and have viewer load/crop to trench
synchronize RangeXY of all images

####################

plot browser: only update visible outputs (accordion state)

replace ingested/processed flag with finished flag

minimum spacing from smallest consecutive peak spacing
weight periodogram by peak height (?? this may be bad)

non-binary hough transform (??)
2nd, 3rd cell endpoint tracking, masks
UI
tiff metadata/sketch of folder watcher (“stream”) command

compute loading statistics (over time)

allow multiple accordion panes to be open simultaneously (see ipywidgets bug)
figure out why regrid(aggregator='mode') segfaults
revisit holoviews image axis inversion/overlay bug
fix bokeh toolbar/wheel zoom on by default

sublime remotesubl retry

command-line ingest/quantize commands (incl. option to only process first N)
auto LSF parallelization for ingest/quantize
auto-detect quantization level (need “natural image” vs. independent noise heuristic)

get rid of ingest_nd2_file
implement quantize_nd2 by allowing ingest_nd2 take a filter func
profile quantize

allow image viewer to overlay trenches easily
link image viewer to frame stepping widget
improve rotation detection/trench finding
mother cell endpoint tracking
mother cell volume mask
allow image viewer to overlay mean cell intensity/variance easily on seg masks
beyond mother cell tracking

spatial barcode warp/metric/clustering

unify process_arrays, process_attrs, ingest_nd2 so they can all share the same parallelization/remote execution/completion status tracking/progress bar infrastructure

fast/parallel nd2 to zarr converter, with progress bar (command line tool)

crosstalk composite
use fluorescent channel when doing lineage tracking

process_frames: register computed groups callback to compute on demand (TODO: use threading to store, return computed value immediately), provide require_computed, keep track of which (c, t) have been computed
LATER: need to handle versioning of computed callbacks

universal caching/storage layer (look up diagnostic/intermediate calculations, if not found, recompute and store them)

POLISH:
alignment between kymograph pixel centers and sharpness plot points
pixel value live display
turn on wheel zoom by default
DWG overlay

AFTER BUG FIX/WORKAROUND:
live-updating intersected point on thumbnail

NICE THINGS:
replace thumbnail viewer with full-size image viewer
stich together multiple fields in image viewer, toggle to use unified or per-field coördinate system
